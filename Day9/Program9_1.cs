/*Q1. Create a abstract class Account having private instance member Id, Name Balanceamt. 
Id should be generated by application. 
Write readonly property for id
Write getter setter for balance , it should be accessible only in child class.
Write getter setter for name , length of the name can not be more then 15 character.
Create method deposit who’s job is to increase Balanceamt by the amount deposited by account holder. 
Create abstract method withdraw. 
Create two child class saving and current.
In saving Account negative balance not allowed and account holder have to maintain minimum balance of 1000
In current Account negative balance is allowed.
Override withdraw method of parent class who’s job is to decrease Balanceamt by the amount  withdrawn by account holder.
Write toString method to display Id Name and balance.
Your application should create array of account class and store 3 object of child class. 
When you load application it should print name of bank.
*/
using System;

namespace Day9_1
{
    public abstract class Account
    {
        int id;
        static int getid;
        string Name;
       public double Balanceamt;

        static Account()
        {
            Console.WriteLine("Welcome To Swiss Bank!");
        }

        public Account()
        { 
            id = getid++; 
        }

        public int Id
        {
            get { return id; }
        }

        protected double Balance
        {
            set { Balanceamt = value; }
            get { return Balanceamt; }
        }

        public string Namee
        {
            set 
            {
                if (value.Length <= 15)
                {
                    Name = value;
                }
                else { Console.WriteLine("Please Enter Name less tha 15 Characters"); }
            }
            get { return Name; }
        }

        public void deposit(double depo)
        {
            Balanceamt += depo;
            Console.WriteLine("Your Deposited Amount is"+this.Balanceamt);
        }

        public override string ToString()
        {
            return Name +" "+id+" " + Balanceamt;
        }

        public abstract void withdraw(double withdrawamt);
    }

    public class Savings : Account
    {
        public override void withdraw(double withdrawamt)
        {
            const int minbalance = 1000;
            if (Balanceamt <= minbalance && (Balanceamt-withdrawamt<=minbalance)) 
            {
                Console.WriteLine("Mininmum Balance of 1000 Rs is Required in Savings Account");
            }
            else
            {
                Balanceamt -= withdrawamt;
                Console.WriteLine("After Withdraw your Savings Balance:"+Balanceamt);
            }
        }
    }

    public class Current : Account
    {
        public override void withdraw(double withdrawamt)
        {
            if (withdrawamt <= Balanceamt)
            {
                Balanceamt -= withdrawamt;
                Console.WriteLine("After Withdraw your Current Balance:" + Balanceamt);
            }

            else
                Console.WriteLine("You have Insufficient Balance");
           
        }
    }

    public class AccountDemo
    {
        public static void Main(string[] args)
        {
            Account[] arr = new Account[2]{new Current(),new Savings()};
            arr[0].Namee = "Devendra";
            arr[0].deposit(1);
            arr[0].withdraw(5000);
            Console.WriteLine(arr[0].ToString());
            arr[1].Namee = "Neha";
            arr[1].deposit(10000);
            arr[1].withdraw(5000);
            Console.WriteLine(arr[1].ToString());
            Console.ReadLine();
        }
    }
}


